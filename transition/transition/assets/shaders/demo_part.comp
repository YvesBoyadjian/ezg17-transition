#version 430 core

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

struct PStruct {
	vec4 position;
	vec3 velocity;
};

layout(std430, binding=0) buffer Particles_In {
	PStruct particles_in[];
};

layout(std430, binding=1) buffer Particles_Out {
	PStruct particles_out[];
};

layout (binding=2, offset=0) uniform atomic_uint count;

layout (location=3) uniform uint LastCount;
layout (location=4) uniform uint MaximumCount;
layout (location=5) uniform float dt;

void addParticleToOutputList(vec3 pos, vec3 vel, float ttl);

void main() {
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	if (idx >= LastCount) return;
	vec3 velocity = particles_in[idx].velocity;
	vec3 position = particles_in[idx].position.xyz + dt*velocity;
	float ttl = particles_in[idx].position.w - dt;
	velocity = velocity - vec3(dt, dt, dt)/100;
	if (ttl > 0) {
		addParticleToOutputList(position, velocity, ttl);
	}
}

void addParticleToOutputList(vec3 pos, vec3 vel, float ttl) {
	uint nr = atomicCounterIncrement(count);
	if (nr >= MaximumCount) {
		atomicCounterDecrement(count);
		return;
	}
	PStruct particle;
	particle.position = vec4(pos, ttl);
	particle.velocity = vel;
	particles_out[nr] = particle;
}