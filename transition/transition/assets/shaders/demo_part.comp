#version 430

layout (local_size_x = 16, local_size_y = 16, local_size_z = 1) in;

layout(std430, binding=0) buffer Particles_Pos_In {
	vec4 particles_pos_in[];
};
layout(std430, binding=1) buffer Particles_Vel_In {
	vec4 particles_vel_in[];
};

layout(std430, binding=2) buffer Particles_Pos_Out {
	vec4 particles_pos_out[];
};

layout(std430, binding=3) buffer Particles_Vel_Out {
	vec4 particles_vel_out[];
};

layout (binding=4, offset=0) uniform atomic_uint count;

layout (location=5) uniform uint LastCount;
layout (location=6) uniform uint MaximumCount;
layout (location=7) uniform float dt;

void addParticleToOutputList(vec3 pos, vec3 vel, float ttl);

void main() {
	uint idx = gl_GlobalInvocationID.x + gl_GlobalInvocationID.y * gl_NumWorkGroups.x * gl_WorkGroupSize.x;
	if (idx >= LastCount) return;
	vec3 velocity = particles_vel_in[idx].xyz;
	vec3 position = particles_pos_in[idx].xyz + dt*velocity;
	float ttl = particles_pos_in[idx].w - dt;
	velocity = velocity - vec3(0, dt, 0)/10;
	if (ttl > 0) {
		addParticleToOutputList(position, velocity, ttl);
	}
}

void addParticleToOutputList(vec3 pos, vec3 vel, float ttl) {
	uint nr = atomicCounterIncrement(count);
	if (nr >= MaximumCount) {
		atomicCounterDecrement(count);
		return;
	}
	particles_pos_out[nr] = vec4(pos, ttl);
	particles_vel_out[nr] = vec4(vel, 0);
}